// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  SCHOOL_ADMIN
  TEACHER
  STUDENT
}

enum UserStatus {
  active
  invited
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  firstName String
  lastName  String
  role      Role
  status    UserStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schoolId String

  schoolProfile  School?
  teacherProfile Teacher?
  studentProfile Student?
}

model School {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminId String @unique
  admin   User   @relation(fields: [adminId], references: [id])

  teachers   Teacher[]
  students   Student[]
  classes    Class[]
  challenges Challenge[]
}

model Teacher {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  schoolId String
  school   School @relation(fields: [schoolId], references: [id])

  classes Class[] @relation("ClassTeachers")
}

model Student {
  id        String @id @default(uuid())
  studentId String @unique // School-specific student ID
  level     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  schoolId String
  school   School @relation(fields: [schoolId], references: [id])

  classes    Class[]     @relation("ClassStudents")
  challenges Challenge[] @relation("ChallengeStudents")
  solution   Solution[]
}

model Class {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schoolId String
  school   School @relation(fields: [schoolId], references: [id])

  teachers   Teacher[]   @relation("ClassTeachers")
  students   Student[]   @relation("ClassStudents")
  challenges Challenge[] @relation("ChallengeClasses")

  @@index([schoolId, name])
}

model Course {
  id          String  @id @default(uuid())
  title       String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sections Section[]

  @@index([createdAt])
}

model Section {
  id          String  @id @default(uuid())
  title       String
  description String
  order       Int
  isCompleted Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  topics Topic[]

  @@index([courseId, order])
}

model Topic {
  id          String  @id @default(uuid())
  title       String
  order       Int
  isCompleted Boolean @default(false)

  updatedAt DateTime @updatedAt

  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  exercises Exercise[]

  @@unique([sectionId, order])
  @@index([sectionId])
}

enum ExerciseType {
  THEORY
  VALIDATION
  PRACTICE
}

model Exercise {
  id          String       @id @default(uuid())
  type        ExerciseType
  content     String // Question/text/content
  explanation String? // Explanation after answering
  codeSample  String? // For coding exercises
  order       Int
  isCompleted Boolean      @default(false)

  // For multiple choice questions
  options Json? // { choices: string[], correctIndex: number }

  // For coding exercises
  starterCode String?
  solution    String?

  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId, order])
}

model Challenge {
  id             String  @id @default(uuid())
  title          String
  description    String
  difficulty     Int
  exampleContent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school   School @relation(fields: [schoolId], references: [id])
  schoolId String

  assignedClasses  Class[]   @relation("ChallengeClasses")
  assignedStudents Student[] @relation("ChallengeStudents")

  solutions Solution[]
}

model Solution {
  id   String @id @default(uuid())
  code String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id])

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
}
